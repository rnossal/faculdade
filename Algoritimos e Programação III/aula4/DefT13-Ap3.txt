TITULO: Definição do exercício T13
DATA: 26/Agosto/2016

*******  ATIVIDADE SEMIPRESENCIAL DO DIA 12/AGOSTO/2016   ******* 
******* Não entrega resulta em falta no dia, além da nota ******* 

Pode ser feito no máximo em TRIOS, desde de que iniciados na aula do dia 
26/Agosto. Quem faltar a esta aula deverá, necessariamente, realizar 
individualmente. Este exercício deve ser postado na página de exercícios 
até o final da aula do dia 2/Setembro. Página para postar soluções em

http://gravatai.ulbra.tche.br/~elgio/corrige.php

Em caso de cópia de trabalhos, todos os envolvidos terão a nota deste 
exercício ZERADA e não será concedida chance de recuperar.

Este exercícios seguirá mecanismo de testes com correção automática.

Objetivo: vetores, uso de funções e passagem de parâmetros. Programação
segura. Parâmetros interessantes do printf e scanf.

Faça um programa em C que:

a) solicite ao usuário que informe quantos números ponto flutuante ele 
deseja digitar, sendo que este número não pode passar de 60000 elementos.
O máximo deve ser um define.

b) peça que o usuário digite números apenas positivos entre 1 e 500000 
(quizentos mil), na parte inteira. O que o usuário digitar deverá ser 
armazenado em um vetor. Esta leitura deverá ser realizada sob a forma 
de uma função. Não aceite números repetidos até a quarta casa decimal
(3.999154 e 3.999163 devem ser considerados repetidos, pois até a
quarta casa é 3.9991. Não deve aceitar a segunda entrada)

c) após o vetor ser alimentado, ordene-o usando uma função 
(você deve criar esta função).

(SOMENTE ORDENE APÓS A COMPLETA LEITURA)

d) após a ordenação, para cada valor do vetor, gere um outro vetor de
inteiros com o fatorial da parte inteira arredondada de 
cada elemento (se o valor é 3.560, calcule o fatorial de 4). 
Deve ser feito por função.

  Ex: vetfat[0] deverá ter o fatorial do vetDouble[0]
  Lembre-se que fatorial de 0 é 1 e se houver erro (impossível calcular
  o fatorial) armazene -1 para indicar erro 

e) Imprima cada elemento do vetor junto com o seu fatorial. Ao imprimir
cada elemento em ponto flutuante, imprima sempre com 3 casas decimais.

Segue um pequeno trecho do que poderá ser o teu main:

...
 // usuário armazenou em n a quantidade de elementos que ele quer
  printf("Digite %d números:\n", n);
  levetor(vet, n);
  ordenavet(vet, n);
  calcfat(vet, vetfat, n);
/* Parte que imprimirá os resultados */

Exemplo de uso (o que está entre /* não é gerado pelo programa */
Usando o marcador # para linhas que são conversa com o usuário e que serão
ignoradas na correção automática.


Veja o que ocorreu no fatorial de 7. O número realmente digitado foi 6.558979
Na hora de imprimir, imprimiu-se apenas 6.559 (impressão arrendonda na terceira casa),
mas na hora de calcular o fatorial, pegou-se o inteiro arredondado: 6.558979 => 7
Isto porque o 6.5 para 7 (casa igual ou maior que 5, arredonda-se), se fosse 6.4
ficaria apenas 6.

Observe que imprimiu ERRO para fatorial de 46 e de 100. Isto porque o fatorial destes
inteiros é tão grande que não coube na variável int. Se estiver em uma arquitetura de
32 bits, nem o fatorial de 15 poderá ser calculado. Depende da arquitetura e do compilador.

C:\> T13.exe<ENTER>
# Quantos números quer digitar? (1 a 60000)
-5<ENTER>
# ERRO: -5 é um valor inválido

# Quantos números quer digitar? (1 a 60000)
OLA<ENTER>
# Você digitou LIXO

123012<ENTER>
# ERRO: 123012 é um valor inválido

# Quantos números quer digitar? (1 a 60000)
5<ENTER>

# Digite 5 numeros positivos que serao colocados no vetor:
# digite vet[0]
45.671<ENTER>

# digite vet[1]:
-3.45<ENTER>
# ERRO: -3.450000 fora da faixa (1.000000 a 500000.000000)

45.6710712<ENTER>
# ERRO: 45.6711 já foi digitado

# digite vet[1]:
5<ENTER>

# digite vet[2]:
99.99<ENTER>

# digite vet[3]:
5.0001<ENTER>
#ERRO: 5.0000 já foi digitado

# digite vet[3]:
6.558979<ENTER>

# digite vet[4]:
11<ENTER>

# Voce digitou os seguintes elementos:
5.000
6.559
11.000
45.671
99.990

Fatorial de 5  = 120
Fatorial de 7  = 5040
Fatorial de 11 = 39916800
Fatorial de 46 = ERRO
Fatorial de 100 = ERRO

# FIM

C:>

NOTA: caso queira testar,
Fatorial de 46  = 5502622159812088949850305428800254892961651752960000000000
Fatorial de 100 = 9332621544394415268169923885626670049071596826438162146859
                  2963895217599993229915608941463976156518286253697920827223
                  758251185210916864000000000000000000000000
                  
Seguem outros fatoriais que já não cabem em um inteiro de 32 bits COM SINAL:

Fatorial de 12 eh  479001600 (último que cabe em int 32 bits)
  int 32 bits até 2147483647
  
Fatorial de 13 eh 6227020800
Fatorial de 14 eh 87178291200
Fatorial de 15 eh 1307674368000
Fatorial de 16 eh 20922789888000
Fatorial de 17 eh 355687428096000
Fatorial de 18 eh 6402373705728000
Fatorial de 19 eh 121645100408832000
Fatorial de 20 eh 2432902008176640000
    Fatorial de 20 é o último que cabe em um inteiro de 64 bits (long int)

Como nenhuma arquitetura PC atualmente é maior que 64 bits, os fatoriais 
a seguir só são possíveis mediante o uso de alguma biblioteca para trabalhar 
com BIG numbers (ou classe no caso de C++)

Fatorial de 21 eh 51090942171709440000
Fatorial de 22 eh 1124000727777607680000
Fatorial de 23 eh 25852016738884976640000
Fatorial de 24 eh 620448401733239439360000
Fatorial de 25 eh 15511210043330985984000000
Fatorial de 26 eh 403291461126605635584000000
Fatorial de 27 eh 10888869450418352160768000000
Fatorial de 28 eh 304888344611713860501504000000
Fatorial de 29 eh 8841761993739701954543616000000
Fatorial de 30 eh 265252859812191058636308480000000
Fatorial de 31 eh 8222838654177922817725562880000000
Fatorial de 32 eh 263130836933693530167218012160000000

E não tente usar double. Alias, tente para ver o que acontece... :-D
(leram meu artigo do Viva o Linux?)
